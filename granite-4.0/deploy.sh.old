#!/bin/bash
# Deploy Granite 4.0 API Server to FlySQL26
# Usage: ./deploy.sh [build|start|stop|restart|logs|test]

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if .env exists, if not create from example
if [ ! -f .env ]; then
    log_info "Creating .env from .env.example"
    cp .env.example .env
fi

build() {
    log_info "Building Granite 4.0 Docker image..."
    docker-compose build --progress=plain
    log_info "Build complete!"
}

start() {
    log_info "Starting Granite 4.0 API server..."
    docker-compose up -d
    log_info "Server starting..."
    log_info "Waiting for health check..."
    sleep 10

    # Check if container is running
    if docker-compose ps | grep -q "Up"; then
        log_info "✅ Granite 4.0 API is running on http://localhost:8080"
        log_info "Test with: curl http://localhost:8080/health"
    else
        log_error "Failed to start. Check logs with: ./deploy.sh logs"
        exit 1
    fi
}

stop() {
    log_info "Stopping Granite 4.0 API server..."
    docker-compose down
    log_info "Server stopped"
}

restart() {
    log_info "Restarting Granite 4.0 API server..."
    stop
    start
}

logs() {
    docker-compose logs -f
}

test_api() {
    log_info "Testing Granite 4.0 API..."

    # Test 1: Health check
    log_info "Test 1: Health check"
    if curl -f http://localhost:8080/health 2>/dev/null; then
        log_info "✅ Health check passed"
    else
        log_error "❌ Health check failed"
        exit 1
    fi

    echo ""

    # Test 2: List models
    log_info "Test 2: List available models"
    curl -s http://localhost:8080/v1/models | python3 -m json.tool

    echo ""

    # Test 3: Simple completion
    log_info "Test 3: Simple chat completion"
    curl -s http://localhost:8080/v1/chat/completions \
        -H "Content-Type: application/json" \
        -d '{
            "model": "granite-4.0-h-micro",
            "messages": [
                {"role": "user", "content": "What is genomics in one sentence?"}
            ],
            "temperature": 1.0,
            "max_tokens": 100
        }' | python3 -m json.tool

    log_info "✅ All tests passed!"
}

status() {
    log_info "Granite 4.0 API Status:"
    docker-compose ps
    echo ""
    log_info "Resource Usage:"
    docker stats --no-stream granite-4.0-api || log_warn "Container not running"
}

case "${1:-}" in
    build)
        build
        ;;
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
    logs)
        logs
        ;;
    test)
        test_api
        ;;
    status)
        status
        ;;
    *)
        echo "Usage: $0 {build|start|stop|restart|logs|test|status}"
        echo ""
        echo "Commands:"
        echo "  build    - Build the Docker image"
        echo "  start    - Start the API server"
        echo "  stop     - Stop the API server"
        echo "  restart  - Restart the API server"
        echo "  logs     - View server logs (follow mode)"
        echo "  test     - Run API tests"
        echo "  status   - Show container status and resource usage"
        exit 1
        ;;
esac
